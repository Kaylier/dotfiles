#! /usr/bin/python3
import sys, os, select, threading, time, logging
import json, re
import psutil, datetime, subprocess

logger = logging.getLogger()
logger.setLevel(logging.DEBUG)
handler = logging.FileHandler('/var/log/i3bar.log')
handler.setFormatter(logging.Formatter('[%(asctime)s] %(levelname)s - %(message)s'))
handler.setLevel(logging.DEBUG)
logger.addHandler(handler)

def update(*args, **kwargs):
    dt = datetime.timedelta(*args, **kwargs).total_seconds()
    def decorator(cls):
        inst = cls()
        def thread_func():
            while True:
                inst.update()
                time.sleep(dt)
        inst.thread = threading.Thread(target=thread_func)
        inst.thread.start()
        return inst
    return decorator


@update(seconds=1)
class music:
    def __init__(self):
        pass
    def update(self):
        pass

@update(seconds=1)
class volume:
    def __init__(self):
        self.right = 0
        self.left = 0
        self.righton = False
        self.lefton = False
        self.regex_left = re.compile(b"Front Left:\s+[a-zA-Z]+\s+[0-9]+\s+\[([0-9]+)%\]\s+\[(on|off)\]")
        self.regex_right = re.compile(b"Front Right:\s+[a-zA-Z]+\s+[0-9]+\s+\[([0-9]+)%\]\s+\[(on|off)\]")
    def update(self):
        try:
            out = subprocess.check_output(['amixer', 'get', 'Master'], stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError as e:
            logging.error(f"[volume] amixer returned {e.returncode}: {e.stdout.rstrip()}")
        else:
            left = (self.regex_left.findall(out)+[(b'0',b'off')])[0]
            right = (self.regex_right.findall(out)+[(b'0',b'off')])[0]
            self.right = int(right[0])
            self.left = int(left[0])
            self.righton = (right[1] == b"on")
            self.lefton = (left[1] == b"on")

@update(seconds=2)
class connection:
    def __init__(self):
        self.connectivity = 'none'
        self.connections = []
    def update(self):
        try:
            out = subprocess.check_output(['nmcli', '--terse', 'network', 'connectivity'], stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError as e:
            logging.error(f"[connection] nmcli returned {e.returncode}: {e.stdout.rstrip()}")
            self.connectivity = 'unknown'
        else:
            self.connectivity = out.rstrip().decode()
        try:
            out = subprocess.check_output(['nmcli', '--terse', '--field', 'NAME,TYPE', 'connection', 'show', '--active'])
        except subprocess.CalledProcessError as e:
            logging.error(f"[connection] nmcli returned {e.returncode}: {e.stdout.rstrip()}")
        else:
            if out:
                self.connections = [l.split(':') for l in out.decode().rstrip().split('\n')]
            else:
                self.connections = []

@update(seconds=1)
class netspeed:
    def __init__(self):
        self.downspeed = 0
        self.upspeed = 0
        self.bytes_sent = 0
        self.bytes_recv = 0
        self.time = 0
    def update(self):
        io = psutil.net_io_counters(nowrap=True)
        self.time, dt = time.time(), time.time() - self.time
        self.downspeed = int((io.bytes_recv - self.bytes_recv) / dt)
        self.upspeed = int((io.bytes_sent - self.bytes_sent) / dt)
        self.bytes_recv = io.bytes_recv
        self.bytes_sent = io.bytes_sent

@update(minutes=1)
class disk:
    def __init__(self):
        self.percent = 0
        self.free = 0
        self.total = 0
    def update(self):
        usg = psutil.disk_usage("/home")
        self.percent = usg.percent
        self.free = usg.free
        self.total = usg.total

@update(seconds=1)
class ram:
    def __init__(self):
        self.percent = 0
        self.swap = 0
    def update(self):
        self.percent = int(psutil.virtual_memory().percent)
        self.swap = int(psutil.swap_memory().percent)

@update(seconds=1)
class cpu:
    def __init__(self):
        self.percent = 0
    def update(self):
        self.percent = int(psutil.cpu_percent())

@update(seconds=1)
class gpu:
    def __init__(self):
        self.active = False
    def update(self):
        try:
            with open("/proc/acpi/bbswitch", 'r') as f:
                txt = f.readline()
            if "ON" in txt:
                self.active = True
            elif "OFF" in txt:
                self.active = False
            else:
                logging.error("[gpu] Cannot read value")
        except OSError as e:
            logging.error("[gpu] Cannot open state file")

@update(seconds=1)
class fan:
    def __init__(self):
        self.speed = 0
    def update(self):
        self.speed = max((x.current for l in psutil.sensors_fans().values() for x in l), default=0)

@update(seconds=1)
class temperature:
    def __init__(self):
        self.temp = 0
    def update(self):
        self.temp = int(max(x.current for l in psutil.sensors_temperatures().values() for x in l))

@update(seconds=1)
class brightness:
    def __init__(self):
        self.percent = 0
        screens = os.listdir("/sys/class/backlight/")
        if not screens:
            logging.error("[brightness] No backlight found")
        self.file = "/sys/class/backlight/" + screens[0] + "/"
    def update(self):
        try:
            with open(self.file + "actual_brightness", 'r') as f:
                value = int(f.readline())
            with open(self.file + "max_brightness", 'r') as f:
                maxvalue = int(f.readline())
            self.percent = 100*value // maxvalue
        except os.OSError as e:
            logger.error("[brightness] " + e)

@update(seconds=5)
class battery:
    def __init__(self):
        self.alpha = 0.9
        self.power_plugged = False
        self.percent = 100
        self.secsleft = 60
    def update(self):
        bat = psutil.sensors_battery()
        if bat is not None:
            self.power_plugged = bat.power_plugged
            self.percent = int(bat.percent)
            if bat.secsleft < 60*60*24: # Can have large value just after plugging
                self.secsleft = int((1-self.alpha)*self.secsleft + self.alpha*bat.secsleft)

@update(seconds=1)
class clock:
    def __init__(self):
        self.day = 'Abc.'
        self.date = '0000.00.00'
        self.date_short = '00.00'
        self.hour = '00.00.00'
        self.hour_short = '00.00'
    def update(self):
        now = datetime.datetime.now()
        self.day = now.strftime('%a.')
        self.date = now.strftime('%Y.%m.%d')
        self.date_short = now.strftime('%m.%d')
        self.hour = now.strftime('%H.%M.%S')
        self.hour_short = now.strftime('%H.%M')

@update(minutes=30)
class updates:
    def __init__(self):
        self.count = 0
    def update(self):
        try:
            out = subprocess.check_output(['checkupdates'], stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError as e:
            if e.returncode == 2:
                self.count = 0
            else:
                logging.error(f"[updates] checkupdates returned {e.returncode}: {e.stdout.rstrip()}")
        else:
            self.count = out.count(b'\n')

def input_handler():
    line = next(sys.stdin)
    if line != '[\n':
        logging.error("Expected input '[\n', received '"+line+"'")
    for line in sys.stdin:
        line = line.strip(',')
        logging.info(line)
        try:
            click_event = json.loads(line)
        except json.JSONDecodeError as e:
            logging.error("input error")
            continue
        if click_event.get("name") == "updates":
            if click_event.get("button") == 1:
                updates.update()
        elif click_event.get("name") == "brightness":
            if click_event.get("button") == 4:
                subprocess.Popen(["xbacklightamd", "+", "50"])
            elif click_event.get("button") == 5:
                subprocess.Popen(["xbacklightamd", "-", "50"])
        elif click_event.get("name") in ["cpu", "ram", "swap"]:
            if click_event.get("button") == 1:
                subprocess.Popen(["alacritty", "--class", "pop-up", "--command", "htop"])
        elif click_event.get("name") == "volume":
            if click_event.get("button") == 1:
                subprocess.Popen(["amixer", "sset", "Master", "toggle"], stdout=subprocess.DEVNULL)
            elif click_event.get("button") == 4:
                subprocess.Popen(["amixer", "sset", "Master", "5%+"], stdout=subprocess.DEVNULL)
            elif click_event.get("button") == 5:
                subprocess.Popen(["amixer", "sset", "Master", "5%-"], stdout=subprocess.DEVNULL)


icon_on = {"color": "#2dddce", "align": "right", "separator": False, "separator_block_width": 3}
icon_off = {"color": "#869e9c", "align": "right", "separator": False, "separator_block_width": 3}
icon_warning = {"color": "#bb8844", "align": "right", "separator": False, "separator_block_width": 3}
text_on = {"color": "#eaeaea", "align": "left", "separator": False, "separator_block_width": 3}
text_off = {"color": "#888888", "align": "left", "separator": False, "separator_block_width": 3}
text_warning = {"color": "#937e74", "align": "left", "separator": False, "separator_block_width": 3}

class output:
    def __init__(self):
        self.out = []
    def update(self):
        out = []

        # Music
        # TODO
        #'♫'

        out.append({**text_off, "full_text": " ", "separator_block_width": 32})

        if True: # Volume
            symbol = "奄奔墳"[volume.right//34]
            if volume.righton:
                out.append({**icon_on, "name": "volume", "full_text": symbol})
                out.append({**text_on, "name": "volume", "full_text": f"{volume.right}%"})
            else:
                out.append({**icon_off, "name": "volume", "full_text": symbol})
                out.append({**text_off, "name": "volume", "full_text": f"{volume.right}%"})
            if volume.righton != volume.lefton or volume.left != volume.right:
                symbol = "奄奔墳"[volume.left//34]
                if volume.lefton:
                    out.append({**icon_on, "name": "volume", "full_text": symbol})
                    out.append({**text_on, "name": "volume", "full_text": f"{volume.left}%"})
                else:
                    out.append({**icon_off, "name": "volume", "full_text": symbol})
                    out.append({**text_off, "name": "volume", "full_text": f"{volume.left}%"})

        out.append({**text_off, "full_text": " ", "separator_block_width": 32})

        if True: # Connection
            for ssid, tp in connection.connections:
                if tp == "802-11-wireless":
                    out.append({**icon_on, "name": "connection", "full_text": "直"})
                elif tp == "802-3-ethernet":
                    out.append({**icon_on, "name": "connection", "full_text": ""})
                elif tp == "bluetooth":
                    out.append({**icon_on, "name": "connection", "full_text": ""})
                elif tp in ["bridge", "ip-tunnel", "tun", "vpn", "wireguard"]:
                    out.append({**icon_on, "name": "connection", "full_text": "嬨"})
                else:
                    out.append({**icon_on, "name": "connection", "full_text": "ﲋ"})
                out.append({**text_on, "name": "connection", "full_text": ssid, "short_text": ""})

                out.append({**text_off, "full_text": " ", "separator_block_width": 4})

            if connection.connectivity == 'portal':
                out.append({**icon_warning, "name": "connection", "full_text": ""})
            elif connection.connectivity == 'limited':
                out.append({**icon_warning, "name": "connection", "full_text": "爵"})
            elif connection.connectivity == 'full':
                out.append({**icon_on, "name": "connection", "full_text": "爵"})
            else:
                out.append({**icon_off, "name": "connection", "full_text": "爵"})

        out.append({**text_off, "full_text": " ", "separator_block_width": 4})

        if True: # Netspeed
            if netspeed.downspeed < 1000:
                out.append({**icon_off, "name": "netspeed", "full_text": ""})
                out.append({**text_off, "name": "netspeed", "full_text": f"{netspeed.downspeed//1000}ko/s", "min_width": "100ko/s"})
            elif netspeed.downspeed < 1000000:
                out.append({**icon_on, "name": "netspeed", "full_text": ""})
                out.append({**text_on, "name": "netspeed", "full_text": f"{netspeed.downspeed//1000}ko/s", "min_width": "100ko/s"})
            else:
                out.append({**icon_warning, "name": "netspeed", "full_text": ""})
                out.append({**text_warning, "name": "netspeed", "full_text": f"{netspeed.downspeed/1000000:.1f}Mo/s", "min_width": "100ko/s"})
            if netspeed.upspeed < 1000:
                out.append({**icon_off, "name": "netspeed", "full_text": ""})
                out.append({**text_off, "name": "netspeed", "full_text": f"{netspeed.upspeed//1000}ko/s", "min_width": "100ko/s"})
            elif netspeed.upspeed < 1000000:
                out.append({**icon_on, "name": "netspeed", "full_text": ""})
                out.append({**text_on, "name": "netspeed", "full_text": f"{netspeed.upspeed//1000}ko/s", "min_width": "100ko/s"})
            else:
                out.append({**icon_warning, "name": "netspeed", "full_text": ""})
                out.append({**text_warning, "name": "netspeed", "full_text": f"{netspeed.upspeed/1000000:.2f}Mo/s", "min_width": "100ko/s"})

        out.append({**text_off, "full_text": " ", "separator_block_width": 32})

        if True: # Disk space
            if disk.percent < 95:
                out.append({**icon_on, "name": "disk", "full_text": ""})
                out.append({**text_on, "name": "disk", "full_text": f"{disk.free//10**9}Go", "min_width": f"{disk.total//10**9}Go"})
            else:
                out.append({**icon_warning, "name": "disk", "full_text": ""})
                out.append({**text_warning, "name": "disk", "full_text": f"{disk.free//10**9}Go", "min_width": f"{disk.total//10**9}Go"})
        
        if True: # RAM
            if ram.percent < 20:
                out.append({**icon_off, "name": "ram", "full_text": ""})
                out.append({**text_off, "name": "ram", "full_text": f"{ram.percent}%", "min_width": "100%"})
            elif ram.percent < 80:
                out.append({**icon_on, "name": "ram", "full_text": ""})
                out.append({**text_on, "name": "ram", "full_text": f"{ram.percent}%", "min_width": "100%"})
            else:
                out.append({**icon_warning, "name": "ram", "full_text": ""})
                out.append({**text_warning, "name": "ram", "full_text": f"{ram.percent}%", "min_width": "100%"})
            if ram.swap < 1:
                pass
            elif ram.swap < 20:
                out.append({**icon_off, "name": "swap", "full_text": "✚"})
                out.append({**text_off, "name": "swap", "full_text": f"{ram.swap}%", "min_width": "100%"})
            elif ram.swap < 80:
                out.append({**icon_on, "name": "swap", "full_text": "✚"})
                out.append({**text_on, "name": "swap", "full_text": f"{ram.swap}%", "min_width": "100%"})
            else:
                out.append({**icon_warning, "name": "swap", "full_text": "✚"})
                out.append({**text_warning, "name": "swap", "full_text": f"{ram.swap}%", "min_width": "100%"})

        if True: # CPU
            if cpu.percent < 10:
                out.append({**icon_off, "name": "cpu", "full_text": ""})
                out.append({**text_off, "name": "cpu", "full_text": f"{cpu.percent}%", "min_width": "100%"})
            elif cpu.percent < 90:
                out.append({**icon_on, "name": "cpu", "full_text": ""})
                out.append({**text_on, "name": "cpu", "full_text": f"{cpu.percent}%", "min_width": "100%"})
            else:
                out.append({**icon_warning, "name": "cpu", "full_text": ""})
                out.append({**text_warning, "name": "cpu", "full_text": f"{cpu.percent}%", "min_width": "100%"})

        if gpu.active:
            out.append({**icon_on, "name": "gpu", "full_text": ""})

        out.append({**text_off, "full_text": " ", "separator_block_width": 32})

        if fan.speed:
            out.append({**icon_on, "name": "fan", "full_text": ""})
        else:
            out.append({**icon_off, "name": "fan", "full_text": "ﴛ"})

        if True: # Temperature
            if temperature.temp < 50:
                out.append({**icon_off, "name": "temperature", "full_text": ""})
                out.append({**text_off, "name": "temperature", "full_text": f"{temperature.temp}℃", "min_width": "10℃"})
            elif temperature.temp < 60:
                out.append({**icon_off, "name": "temperature", "full_text": ""})
                out.append({**text_off, "name": "temperature", "full_text": f"{temperature.temp}℃", "min_width": "10℃"})
            elif temperature.temp < 70:
                out.append({**icon_on, "name": "temperature", "full_text": ""})
                out.append({**text_on, "name": "temperature", "full_text": f"{temperature.temp}℃", "min_width": "10℃"})
            elif temperature.temp < 80:
                out.append({**icon_on, "name": "temperature", "full_text": ""})
                out.append({**text_on, "name": "temperature", "full_text": f"{temperature.temp}℃", "min_width": "10℃"})
            else:
                out.append({**icon_warning, "name": "temperature", "full_text": ""})
                out.append({**text_warning, "name": "temperature", "full_text": f"{temperature.temp}℃", "min_width": "10℃"})

        out.append({**icon_on, "name": "brightness", "full_text": "☀"})
        out.append({**text_on, "name": "brightness", "full_text": f"{brightness.percent}%"})

        out.append({**text_off, "full_text": " ", "separator_block_width": 4})

        if battery.power_plugged:
            symbol = ""[battery.percent//10]
            if battery.percent == 100:
                out.append({**icon_off, "name": "battery", "full_text": symbol})
            else:
                out.append({**icon_on , "name": "battery", "full_text": symbol})
            out.append({
                **text_on,
                "name": "battery",
                "full_text": f"{battery.percent:n}%",
                "short_text": "",
                "min_width": "100%"})
        else:
            symbol = ""[battery.percent//10]
            if battery.percent == 100:
                out.append({**icon_off    , "name": "battery", "full_text": symbol})
            elif battery.percent >= 20:
                out.append({**icon_on     , "name": "battery", "full_text": symbol})
            else:
                out.append({**icon_warning, "name": "battery", "full_text": symbol})
            minutes, _ = divmod(battery.secsleft, 60)
            hours, minutes = divmod(minutes, 60)
            out.append({
                **text_on,
                "name": "battery",
                "full_text": f"{battery.percent:n}% ({hours}:{minutes:0>2})",
                "short_text": "",
                "min_width": "100% (00:00)"})

        out.append({**text_off, "full_text": " ", "separator_block_width": 32})

        out += [
                {   **icon_on,
                    "name": "clock",
                    "instance": "day",
                    "full_text": clock.day,
                    "short_text": "",
                    "min_width": "Aaa."
                    },
                {   **text_off,
                    "name": "clock",
                    "instance": "date",
                    "full_text": clock.date,
                    "short_text": clock.date_short,
                    "min_width": "0000.00.00"
                    },
                {   **text_on ,
                    "name": "clock",
                    "instance": "hour",
                    "full_text": clock.hour,
                    "short_text": clock.hour_short,
                    "min_width": "00.00.00"
                    }
                ]

        out.append({**text_off, "full_text": " ", "separator_block_width": 4})

        if updates.count > 90:
            out.append({**icon_warning, "name": "updates", "full_text": "ﮮ ", "short_text": ""})
        elif updates.count > 30:
            out.append({**icon_on     , "name": "updates", "full_text": "ﮮ ", "short_text": ""})
        elif updates.count > 10:
            out.append({**icon_off    , "name": "updates", "full_text": "ﮮ ", "short_text": ""})

        self.out = out
output = output()


if __name__ == '__main__':
    sys.stdout.write(json.dumps({"version": 1, "click_events": True}))
    sys.stdout.write('[')

    read_stdin = threading.Thread(target=input_handler)
    read_stdin.start()
    while True:
        output.update()
        sys.stdout.write(json.dumps(output.out)+',')
        sys.stdout.flush()
        time.sleep(1)

